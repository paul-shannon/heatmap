library(jsonlite)
fromJSON("tiny.json")
$row <- nodes
$row_nodes
row_nodes
x <- list(matrix(1:9, nrow=3))
x
x <- list(mat(matrix(1:9, nrow=3)))
x <- list(mat.matrix(1:9, nrow=3))
mat = matrix(1:9, nrow=3)
x <- list(mat)
x
x$mat
"mat" = matrix(1:9, nrow=3)
mat
"mat"
"mat" = matrix(1:9, nrow=3)
"mat"
print("mat"0
print("mat")
x <- list(mat = matrix(1:9, nrow=3))
x
x <- list(row_nodes =  matrix(dimnames = list(c(1,2,3,4), c("name", "clust, ,mat = matrix(1:9, nrow=3))
)
x <- list(row_nodes =  matrix(dimnames = list(c(1,2,3,4), c("name", "clust", "rank", "group"))), mat = matrix(1:9, nrow))
x <- list(row_nodes =  matrix(0, nrow=4, ncol=4, dimnames = list(c(1,2,3,4), c("name", "clust", "rank", "group"))), mat = matrix(1:9, nrow))
x <- list(row_nodes =  matrix(0, nrow=4, ncol=4, dimnames = list(c(1,2,3,4), c("name", "clust", "rank", "group"))), mat = matrix(1:9, nrow=3))
x
x <- list(row_nodes =  matrix(0, nrow=4, ncol=4, dimnames = list(c(1,2,3,4), c("name", "clust", "rank", "group"))), col_nodes = matrix(0, nrow=4, ncol=4, dimnames = list(c(1,2,3,4), c("name", "clust", "rank", "group"))), mat = matrix(1:9, nrow=3))
x
toJSON(x)
x <- list(row_nodes =  matrix(0, nrow=4, ncol=4, dimnames = list(c(1,2,3,4), c("name", "clust", "rank", "group"))), col_nodes = matrix(0, nrow=4, ncol=4, dimnames = list(c(1,2,3,4), c("name", "clust", "rank", "group"))), mat = matrix(1:9, nrow=3))
x$row <- nodes
x$row_nodes
dimnames(x$row_nodes)
x
w <- list(row_nodes = matrix
?toJSOn
?toJSON
obj = fromJSON("tiny.json")
obj
obj$row_nodes
obj$row_nodes$name
obj$row_nodes$name[3]
obj$row_nodes$name[3] <- "Alabama"
obj
s <- toJSON(obj)
write.file(s, "teny.js")
writeChar(s, "teny.js")
writeLines(s, "teny.js")
s
obj
obj$clust
obj$row_nodes$clust
[1 2 3]
1 2 3
[1, 2, 3]
(1,2,3)
(1 2 3)
obj$row_nodes[,1]
obj$row_nodes[1,]
obj$row_nodes[,2]
c(1,2,3)
hc1
q()
source("test.R")
final()
treeMtx
print(obj$col_nodes)
source("test.R")
final()
obj$col_nodes
treeMtx2
obj$col_nodes$clust
clust
clust <- treeMtx2[, 3]
clust
name
name <- hc2$labels
name
hc2$order
clust <- hc2$order
rank <- hc2$order
names(hc2)
group <- treeMtx2
group
group <- list(treeMtx2)
group
group <- list(list(sapply(treeMtx2)), 5)
name
clust
list(sapply(treeMtx2))
list(sapply(1:4, treeMtx2))
name
clust
rank
data.frame(name=name, clust=clust, stringsAsFactors=FALSE)
data.frame(name=name, clust=clust, rank=rank,stringsAsFactors=FALSE)
groups
group
obj
fromJSON("tiny.json")
groups = list(c(1,1,1), c(2,1,1), c(3,2,1))
groups
data.frame(name=name, clust=clust, rank=rank, group=groups, stringsAsFactors=FALSE)
name
groups = list(c(1,1,1), c(2,1,1), c(3,2,1), c(97, 98, 99))
data.frame(name=name, clust=clust, rank=rank, group=groups, stringsAsFactors=FALSE)
groups
unlist(groups)
groups = c(c(1,1,1), c(2,1,1), c(3,2,1), c(97, 98, 99))
groups
groups = c(list(1,1,1), list(2,1,1), list(3,2,1), list(97, 98, 99))
gropus
groups
?c
obj
groups <- obj$col_nodes$group
groups
data.frame(name=name, clust=clust, rank=rank, group=groups, stringsAsFactors=FALSE)
obj
class(obj$col_nodes$group)
data.frame(name=name, clust=clust, rank=rank,stringsAsFactors=FALSE)
tbl <- data.frame(name=name, clust=clust, rank=rank,stringsAsFactors=FALSE)
cbind(tbl, group=1:4)
cbind(tbl, group=list(list(1:4), list(1:4), list(1:4), list(1:4)))
cbind(tbl, group=list(list(1:4), unlist(1:4), list(1:4), list(1:4)))
cbind(tbl, group=c(list(1:4), list(1:4), list(1:4), list(1:4)))
cbind(tbl, group=list(1:4), unlist(1:4), list(1:4), list(1:4))
cbind(tbl, group=I(list(list(1:4), list(1:4), list(1:4), list(1:4))))
cbind(tbl, group=I(list(list(1,2,3,8), list(1,2,3,5), list(1,2,8,10), list(8,8,8,8))))
tbl <- cbind(tbl, group=I(list(list(1,2,3,8), list(1,2,3,5), list(1,2,8,10), list(8,8,8,8))))
tbl$group
tbl <- cbind(tbl, group=I(list(1:4, 1:4, 1:4, 1:4))
)
tbl
group
group <- I(list(treeMtx[1,], treeMtx[2,], treeMtx[3,], treeMtx[4,]))
group <- I(list(treeMtx2[1,], treeMtx2[2,], treeMtx2[3,], treeMtx2[4,]))
group
col_nodesTest <- data.frame(name=name, clust=clust, rank=rank, group=group, stringsAsFactors=FALSE)
col_nodesTest
name2 = hc1$labels
name2
clust2 = hc1$order
clust2
rank2 = hc1$order
treeMtx
group = I(list(treeMtx[1,], treeMtx[2,], treeMtx[3,]))
group2 = I(list(treeMtx[1,], treeMtx[2,], treeMtx[3,]))
group <- I(list(treeMtx2[1,], treeMtx2[2,], treeMtx2[3,], treeMtx2[4,]))
row_nodesTest <- data.frame(name=name2, clust=clust2, rank=rank2, group=group2, stringsAsFactors=FALSE)
row_nodesTest
mat
mtr
mtx
mtx.data
mat = unname(mtx, force=FALSE)
mat
dataFrameJson <- (row_nodesTest, col_nodesTest, mat)
dataFrameJson <- (row_nodesTest col_nodesTest mat)
dataFrameJson <- list(row_nodesTest, col_nodesTest, mat)
dataFrameJson
dataFrameJson <- list(row_nodes = row_nodesTest, col_nodes = col_nodesTest, mat = mat)
dataFrameJson
toJSON(dataFrameJson)
source("dataFrame.R")
dataFrame()
rownames
source("dataFrame.R")
dataFrame()
source("dataFrame.R")
dataFrame()
source("dataFrame.R")
dataFrame()
source("dataFrame.R")
dataFrame()
heatmap.2(mtx, trace="none", col=rev(heat.colors(10)), margins=c(20, 20))
source("dataFrame.R
")
source("dataFrame.R")
dataFrame()
source("../MyPackage/inst/unitTests/test_dataFrame.R")
source("github/MyPackage/inst/unitTests/test_dataFrame.R")
source("/MyPackage/inst/unitTests/test_dataFrame.R")
library(RUnit)
test_dataFrame <- function() {
    checkTrue(is.data.frame(dataFrame()))
} 
test_dataFrame <- function() { checkTrue(is.data.frame(dataFrame())) } 
test_dateFrame()
test_dateFrame <- function() {
checkTrue(is.data.frame(dataFrame()))
}
test_dateFrame()
dataFrame()
source("dataFrame.R")
dataFrame()
test_dateFrame()
dataFrame()
source("dataFrame.R")
test_dateFrame()
source("dataFrame.R")
test_dateFrame()
source("dataFrame.R")
rowgorup
rowgroup
dataFrame()
rowgroup
colgroup
row1 <- I(for i in 1:3) {
row1
row1 = I(for in 1:3) {
row1 = I(for i in 1:3) {
row1 = I(for (i in 1:3) {
row1 = I(for (i in 1:3) {+ list[i] <- 
list[i] <- 
row1 <- I(for (i in 1:3) {
list[i] <- treeMtx[i,]})
row1 <- I(for (i in 1:3) {
row1[i] <- treeMtx[1,]})
I(for (i in 1:3) {
row1[i] <- treeMtx[1,]})
I(for (i in 1:3) {
row1[i] <- treeMtx[i,]})
row1 <- NULL
I(for (i in 1:3) {
row1[i] <- treeMtx[i,]})
treeMtx
colgroup
list(1,2,3)
I(list(1,2,3))
?I
class(I(list(1,2,3)))
treeMtx
for(i in 1:3) {
row1[i] <- treeMtx[i,]}
row1
row1 <- list()
for(i in 1:3) {
row1[i] <- treeMtx[i,]}
row1
ncol(treeMtx)
nrow(treeMtx)
rowgroup
treeMtx[1,]
class(treeMtx[1,])
row1 <- list()
row1[[1]] <- treeMtx[1,]
row1
for(i in 1:ncol(treeMtx)) {
row1[[i]] <- treeMtx[i,]}
row1
I(for(i in 1:ncol(treeMtx)) {
row1[[i]] <- treeMtx[i,]})
row1
row2 <- list()
I(for(i in 1:ncol(treeMtx)) {
row2[[i]] <- treeMtx[i,]})
row2
rowgroup
row2
row3 <- list()
row3 <- I(for(i in 1:ncol) {
row3[[i]] <- treeMtx[i,]})
row3
row3 <- I(for(i in 1:ncol(treeMtx)) {
row3[[i]] <- treeMtx[i,]})
row3
row3 <- I(for(i in 1:ncol(treeMtx)) {
list[[i]] <- treeMtx[i,]})
source("dataFrame.R")
dataFrame()
rowgroup
source("dataFrame.R")
dataFrame()
rowgroup
colgroup
source("dataFrame.R")
dataFrame()
rowgroup
source("dataFrame.R")
dataFrame()
rowgroup
colgroup
dataFrame()
source("dataFrame.R")
dataFrame()
w
w()
1
w
w()
source("dataFrame.R")
dataFrame()
w()
rowgroup
dataFrame()
source("dataFrame.R")
dataFrame()
w
rowgroup
w()
source("dataFrame.R")
source("dataFrame.R")
dataFrame()
w()
z <- list()
z <- I(list(treeMtx[1:ncol(treeMtx),]))
z
rowgroup
treeMtx
p <- list(0
p <- list(0
p <- list()
treeMtx(unlist(p), nrow=3, byrow=TRUE)
df <- data.frame(treeMtx(unlist(p), nrow=3, byrow=TRUE))
unlist(treeMtx)
source("dataFrame.R")
dataFrame()
rowgroup
class(rowgroup)
class(colgroup)
source("dataFrame.R")
source("dataFrame.R")
dataFrame()
source("dataFrame.R")
dataFrame()
row
rowFill
treeMtx2
source("dataFrame.R")
dataFrame()
w
w()
source("dataFrame.R")
dataFrame()
w()
q()
